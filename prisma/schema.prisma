// This is your Prisma schema file for LMS
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model with role-based access
model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String
  role          Role      @default(STUDENT)
  avatar        String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  taughtCourses Course[]               @relation("TeacherCourses")
  enrollments   Enrollment[]
  assignments   AssignmentSubmission[]
  quizAttempts  QuizAttempt[]
  grades        Grade[]
  notifications Notification[]

  @@map("users")
}

// Course model
model Course {
  id          String       @id @default(cuid())
  title       String
  description String       @db.Text
  teacherId   String
  teacher     User         @relation("TeacherCourses", fields: [teacherId], references: [id], onDelete: Cascade)
  status      CourseStatus @default(DRAFT)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  lessons     Lesson[]
  assignments Assignment[]
  quizzes     Quiz[]
  enrollments Enrollment[]

  @@map("courses")
}

// Lesson model
model Lesson {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  order     Int
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("lessons")
}

// Assignment model
model Assignment {
  id          String   @id @default(cuid())
  title       String
  description String   @db.Text
  dueDate     DateTime
  maxScore    Int      @default(100)
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  submissions AssignmentSubmission[]
  grades      Grade[]

  @@map("assignments")
}

// Assignment Submission model
model AssignmentSubmission {
  id           String     @id @default(cuid())
  assignmentId String
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  studentId    String
  student      User       @relation(fields: [studentId], references: [id], onDelete: Cascade)
  content      String     @db.Text
  fileUrl      String?
  submittedAt  DateTime   @default(now())

  @@unique([assignmentId, studentId])
  @@map("assignment_submissions")
}

// Quiz model
model Quiz {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  timeLimit   Int? // in minutes
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  questions Question[]
  attempts  QuizAttempt[]
  grades    Grade[]

  @@map("quizzes")
}

// Question model
model Question {
  id            String       @id @default(cuid())
  quizId        String
  quiz          Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  questionText  String       @db.Text
  questionType  QuestionType
  options       Json? // For multiple choice: ["option1", "option2", ...]
  correctAnswer String       @db.Text
  points        Int          @default(1)
  order         Int

  @@map("questions")
}

// Quiz Attempt model
model QuizAttempt {
  id          String   @id @default(cuid())
  quizId      String
  quiz        Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  studentId   String
  student     User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  answers     Json // Store answers as JSON
  score       Int?
  submittedAt DateTime @default(now())

  @@map("quiz_attempts")
}

// Enrollment model
model Enrollment {
  id         String           @id @default(cuid())
  studentId  String
  student    User             @relation(fields: [studentId], references: [id], onDelete: Cascade)
  courseId   String
  course     Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  status     EnrollmentStatus @default(ACTIVE)
  enrolledAt DateTime         @default(now())

  @@unique([studentId, courseId])
  @@map("enrollments")
}

// Grade model
model Grade {
  id           String      @id @default(cuid())
  studentId    String
  student      User        @relation(fields: [studentId], references: [id], onDelete: Cascade)
  assignmentId String?
  assignment   Assignment? @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  quizId       String?
  quiz         Quiz?       @relation(fields: [quizId], references: [id], onDelete: Cascade)
  score        Int
  maxScore     Int
  feedback     String?     @db.Text
  gradedAt     DateTime    @default(now())

  @@map("grades")
}

// Notification model
model Notification {
  id        String           @id @default(cuid())
  userId    String
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  message   String           @db.Text
  type      NotificationType
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  @@map("notifications")
}

// Enums
enum Role {
  ADMIN
  TEACHER
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  DROPPED
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  SHORT_ANSWER
}

enum NotificationType {
  ENROLLMENT
  ASSIGNMENT_DUE
  GRADE_POSTED
  COURSE_UPDATE
  GENERAL
}
